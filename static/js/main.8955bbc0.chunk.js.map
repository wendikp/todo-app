{"version":3,"sources":["todolist.png","App.js","reportWebVitals.js","index.js"],"names":["data","Header","className","src","logo","InfoBar","taskNumber","TaskAdder","setTasks","tasks","useState","currentValue","setCurrentValue","TextField","value","onChange","event","target","label","variant","Button","color","disabled","onClick","newTask","id","length","message","handleAddTask","Task","style","display","startIcon","updatedTasks","filter","task","handleDelete","TaskList","map","TaskApp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAAe,G,MAAA,IAA0B,sC,OCSnCA,EAAO,GAEPC,EAAS,WACb,OAAO,6CAAe,qBAAKC,UAAU,OAAOC,IAAKC,QAG7CC,EAAU,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAChB,OAAO,uCAAUA,EAAV,sCAGHC,EAAY,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAAW,EACCC,mBAAS,IADV,mBAChCC,EADgC,KAClBC,EADkB,KAWvC,OAAO,sBAAKV,UAAU,aAAf,UACL,cAACW,EAAA,EAAD,CAAWC,MAAOH,EAAcI,SAAU,SAAAC,GAAK,OAAIJ,EAAgBI,EAAMC,OAAOH,QAAQI,MAAM,cAAcC,QAAQ,aACpH,cAACC,EAAA,EAAD,CAAQD,QAAQ,YAAYE,MAAM,UAAUC,SAA2B,KAAjBX,EAAqBY,QAAS,kBAXhE,WACpB,IAAMC,EAAU,CACdC,GAAIhB,EAAMiB,OAAS,EACnBC,QAAShB,GAEXH,EAAS,GAAD,mBAAKC,GAAL,CAAYe,KACpBZ,EAAgB,IAK0EgB,IAA1F,wBAIEC,EAAO,SAAC,GAAoC,IAAnCF,EAAkC,EAAlCA,QAASF,EAAyB,EAAzBA,GAAIhB,EAAqB,EAArBA,MAAOD,EAAc,EAAdA,SAKjC,OAAO,qBAAKN,UAAU,iBAAf,SACL,sBAAKA,UAAU,OAAf,UACE,qBAAK4B,MAAO,CAACC,QAAS,gBAAtB,SAAwCJ,IACxC,cAACP,EAAA,EAAD,CACED,QAAQ,YACRE,MAAM,YACNW,UAAW,cAAC,IAAD,IACXT,QAAS,kBAXM,WACnB,IAAMU,EAAexB,EAAMyB,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KACtDjB,EAASyB,GASUG,IAJjB,0BAYAC,EAAW,SAAC,GAAuB,IAAtB5B,EAAqB,EAArBA,MAAOD,EAAc,EAAdA,SACxB,OAAOC,EAAM6B,KAAI,SAAAH,GACf,OAAO,cAAC,EAAD,CAAMR,QAASQ,EAAKR,QAASF,GAAIU,EAAKV,GAAIjB,SAAUA,EAAUC,MAAOA,QAI1E8B,EAAU,WAAO,IAAD,EACM7B,mBAASV,GADf,mBACbS,EADa,KACND,EADM,KAEpB,OAAO,qBAAKN,UAAU,YAAf,SACN,sBAAKA,UAAU,MAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,CAASI,WAAYG,EAAMiB,SAC3B,cAAC,EAAD,CAAWlB,SAAUA,EAAUC,MAAOA,IACtC,cAAC,EAAD,CAAUA,MAAOA,EAAOD,SAAUA,UASvBgC,EAJH,WACV,OAAO,cAAC,EAAD,KC/DMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8955bbc0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/todolist.2f78c72f.png\";","import React, {useState} from \"react\";\nimport { Button } from '@material-ui/core';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TextField from '@material-ui/core/TextField';\nimport \"./App.css\";\n\nimport logo from './todolist.png';\n\nconst data = [];\n\nconst Header = () => {\n  return <h1>TO DO LIST <img className=\"logo\" src={logo}/></h1>\n}\n\nconst InfoBar = ({taskNumber}) => {\n  return <div>Ada {taskNumber} task(s) yang perlu dikerjakan.</div>\n}\n\nconst TaskAdder = ({setTasks, tasks}) => {\n  const [currentValue, setCurrentValue] = useState('');\n  const handleAddTask = () => {\n    const newTask = {\n      id: tasks.length + 1,\n      message: currentValue\n    }\n    setTasks([...tasks, newTask]);\n    setCurrentValue('');\n  }\n\n  return <div className=\"task-adder\">\n    <TextField value={currentValue} onChange={event => setCurrentValue(event.target.value)} label=\"Tambah task\" variant=\"outlined\" />\n    <Button variant=\"contained\" color=\"primary\" disabled={currentValue === ''} onClick={() => handleAddTask()}>Tambah</Button>\n  </div>\n}\n\nconst Task = ({message, id, tasks, setTasks}) => {\n  const handleDelete = () => {\n    const updatedTasks = tasks.filter(task => task.id !== id);\n    setTasks(updatedTasks);\n  }\n  return <div className=\"container-task\">\n    <div className=\"task\">\n      <div style={{display: \"inline-block\"}}>{message}</div>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        startIcon={<DeleteIcon />}\n        onClick={() => handleDelete()}\n      >\n        Delete\n      </Button>\n    </div>\n  </div>\n}\n\nconst TaskList = ({tasks, setTasks}) => {\n  return tasks.map(task => {\n    return <Task message={task.message} id={task.id} setTasks={setTasks} tasks={tasks} />\n  })\n}\n\nconst TaskApp = () => {\n  const [tasks, setTasks] = useState(data);\n  return <div className=\"container\">\n   <div className=\"box\">\n    <Header />\n    <InfoBar taskNumber={tasks.length} />\n    <TaskAdder setTasks={setTasks} tasks={tasks} />\n    <TaskList tasks={tasks} setTasks={setTasks} />\n   </div>\n  </div>\n}\n\nconst App = () => {\n  return <TaskApp />\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}